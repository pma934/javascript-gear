/* 已知一个奇怪的队列，这个队列中有n个数，初始状态时，顺序是1,2,3,4,…n，是1-n按顺
序排列。这个队列只支持一种操作，就是把队列中的第i号元素提前到队首(1<i<=n)，如有4个
元素，初始为1，2，3，4,可以将3提前到队首，得到3，1，2，4 。  现在给出一个经过若
干次操作之后的序列，请你找出这个序列至少是由原序列操作了多少次得到的。 */

//思路：没有移动过的数在尾部顺序排列，因此从尾部开始倒序，当出现第一个变大的数，则这个数和其前面的所以数都移动过

// 用例:

// 对应输出应该为:
// 901 
var count = Number(readline())
var list = readline().split(' ')
var last = count
var flag = true
for(let i=count-1;i>=0;i--){
    let now = Number(list[i]) 
    if(last<now){
        print(i+1)
        flag = false
        break
    }
    last = now
}
if(flag){
    print(0)
}
